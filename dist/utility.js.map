{"version":3,"sources":["../source/utility.js"],"names":["request","URI","errorHandler","options","response","status","error","Object","assign","URIError","statusText","code","body","json","error_description","searchQuery","table","keys","words","Query","or","split","map","word","key","contains","flat"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AAEO,eAAeA,OAAf,CAAuBC,GAAvB,QAA0D;AAAA,MAA9B;AAAEC,IAAAA;AAAF,GAA8B;AAAA,MAAXC,OAAW;AAC7D,QAAMC,QAAQ,GAAG,MAAM,wBAAMH,GAAN,EAAWE,OAAX,CAAvB;AAEA,MAAIC,QAAQ,CAACC,MAAT,GAAkB,GAAtB,EAA2B,OAAOD,QAAP;AAE3B,QAAME,KAAK,GAAGJ,YAAY,GACpB,MAAMA,YAAY,CAACE,QAAD,CADE,GAEpBG,MAAM,CAACC,MAAP,CAAc,IAAIC,QAAJ,CAAaL,QAAQ,CAACM,UAAtB,CAAd,EAAiD;AAC/CC,IAAAA,IAAI,EAAEP,QAAQ,CAACC;AADgC,GAAjD,CAFN;AAMAC,EAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AAEA,QAAME,KAAN;AACH;;AAEM,eAAeJ,YAAf,CAA4BE,QAA5B,EAAsC;AACzC,QAAMQ,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAnB;AAEA,QAAMP,KAAK,GAAG,IAAIG,QAAJ,CAAaG,IAAI,CAACE,iBAAlB,CAAd;AAECR,EAAAA,KAAK,CAACK,IAAN,GAAaP,QAAQ,CAACC,MAAvB,EAAiCC,KAAK,CAACM,IAAN,GAAaA,IAA9C;AAEA,SAAON,KAAP;AACH;AAED;;;;;;;;;AAOO,SAASS,WAAT,CAAqBC,KAArB,EAA4BC,IAA5B,EAAkCC,KAAlC,EAAyC;AAC5C,SAAOC,kBAAMC,EAAN,CACH,GAAGF,KAAK,CACHG,KADF,CACQ,KADR,EAEEC,GAFF,CAEMC,IAAI,IAAIN,IAAI,CAACK,GAAL,CAASE,GAAG,IAAI,IAAIL,iBAAJ,CAAUH,KAAV,EAAiBS,QAAjB,CAA0BD,GAA1B,EAA+BD,IAA/B,CAAhB,CAFd,EAGEG,IAHF,EADA,CAAP;AAMH","sourcesContent":["import { Query } from 'leanengine';\n\nimport fetch from 'node-fetch';\n\nexport async function request(URI, { errorHandler, ...options }) {\n    const response = await fetch(URI, options);\n\n    if (response.status < 300) return response;\n\n    const error = errorHandler\n        ? await errorHandler(response)\n        : Object.assign(new URIError(response.statusText), {\n            code: response.status\n        });\n\n    error.response = response;\n\n    throw error;\n}\n\nexport async function errorHandler(response) {\n    const body = await response.json();\n\n    const error = new URIError(body.error_description);\n\n    (error.code = response.status), (error.body = body);\n\n    return error;\n}\n\n/**\n * @param {String}   table\n * @param {String[]} keys\n * @param {String}   words\n *\n * @return {Query}\n */\nexport function searchQuery(table, keys, words) {\n    return Query.or(\n        ...words\n            .split(/\\s+/)\n            .map(word => keys.map(key => new Query(table).contains(key, word)))\n            .flat()\n    );\n}\n"],"file":"utility.js"}