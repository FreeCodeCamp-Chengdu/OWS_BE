{"version":3,"sources":["../../source/utility/GitHub.js"],"names":["OAuth","client_id","client_secret","onDone","context","code","state","query","response","method","body","URLSearchParams","errorHandler","Object","fromEntries","text","entries","scope","split","headers","Authorization","access_token","Accept","user","json","proxy","tokenGetter","url","request","host","keys","status"],"mappings":";;;;;;;;AAAA;;AAEA;;AAEO,SAASA,KAAT,CAAeC,SAAf,EAA0BC,aAA1B,EAAyCC,MAAzC,EAAiD;AACpD,SAAO,MAAMC,OAAN,IAAiB;AACpB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,OAAO,CAACG,KAAhC;AAEA,QAAIC,QAAQ,GAAG,MAAM,eACjB,6CADiB,EAEjB;AACIC,MAAAA,MAAM,EAAE,MADZ;AAEIC,MAAAA,IAAI,EAAE,IAAIC,oBAAJ,CAAoB;AACtBV,QAAAA,SADsB;AAEtBC,QAAAA,aAFsB;AAGtBG,QAAAA,IAHsB;AAItBC,QAAAA;AAJsB,OAApB,CAFV;AAQIM,MAAAA,YAAY,EAAZA;AARJ,KAFiB,CAArB;AAcA,UAAMF,IAAI,GAAGG,MAAM,CAACC,WAAP,CACT,IAAIH,oBAAJ,EAAoB,MAAMH,QAAQ,CAACO,IAAT,EAA1B,GAA2CC,OAA3C,EADS,CAAb;AAIA,QAAIN,IAAI,CAACO,KAAT,EAAgBP,IAAI,CAACO,KAAL,GAAaP,IAAI,CAACO,KAAL,CAAWC,KAAX,CAAiB,GAAjB,CAAb;AAEhBV,IAAAA,QAAQ,GAAG,MAAM,eAAQ,6BAAR,EAAuC;AACpDW,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,SAAQV,IAAI,CAACW,YAAa,EADrC;AAELC,QAAAA,MAAM,EAAE;AAFH,OAD2C;AAKpDV,MAAAA,YAAY,EAAZA;AALoD,KAAvC,CAAjB;AAQAF,IAAAA,IAAI,CAACa,IAAL,GAAY,MAAMf,QAAQ,CAACgB,IAAT,EAAlB;AAEA,UAAMrB,MAAM,CAACC,OAAD,EAAUM,IAAV,EAAgBJ,KAAhB,CAAZ;AACH,GAlCD;AAmCH;;AAEM,SAASmB,KAAT,CAAeC,WAAf,EAA4B;AAC/B,SAAO,MAAMtB,OAAN,IAAiB;AACpB,UAAM;AAAEuB,MAAAA,GAAF;AAAOlB,MAAAA,MAAP;AAAeU,MAAAA,OAAf;AAAwBT,MAAAA;AAAxB,QAAiCN,OAAO,CAACwB,OAA/C;AAEA,WAAOT,OAAO,CAACU,IAAf;AACAV,IAAAA,OAAO,CAACC,aAAR,GAAwB,YAAY,MAAMM,WAAW,CAACtB,OAAD,CAA7B,CAAxB;AAEA,UAAMI,QAAQ,GAAG,MAAM,eAAQ,2BAA2BmB,GAAnC,EAAwC;AAC3DlB,MAAAA,MAD2D;AAE3DU,MAAAA,OAF2D;AAG3DT,MAAAA,IAAI,EAAEG,MAAM,CAACiB,IAAP,CAAYpB,IAAZ,EAAkB,CAAlB,IAAuBA,IAAvB,GAA8B;AAHuB,KAAxC,CAAvB;AAMCN,IAAAA,OAAO,CAAC2B,MAAR,GAAiBvB,QAAQ,CAACuB,MAA3B,EACC3B,OAAO,CAACM,IAAR,GAAe,MAAMF,QAAQ,CAACgB,IAAT,EADtB;AAEH,GAdD;AAeH","sourcesContent":["import { URLSearchParams } from 'url';\n\nimport { request, errorHandler } from '.';\n\nexport function OAuth(client_id, client_secret, onDone) {\n    return async context => {\n        const { code, state } = context.query;\n\n        var response = await request(\n            'https://github.com/login/oauth/access_token',\n            {\n                method: 'POST',\n                body: new URLSearchParams({\n                    client_id,\n                    client_secret,\n                    code,\n                    state\n                }),\n                errorHandler\n            }\n        );\n\n        const body = Object.fromEntries(\n            new URLSearchParams(await response.text()).entries()\n        );\n\n        if (body.scope) body.scope = body.scope.split(',');\n\n        response = await request('https://api.github.com/user', {\n            headers: {\n                Authorization: `token ${body.access_token}`,\n                Accept: 'application/json'\n            },\n            errorHandler\n        });\n\n        body.user = await response.json();\n\n        await onDone(context, body, state);\n    };\n}\n\nexport function proxy(tokenGetter) {\n    return async context => {\n        const { url, method, headers, body } = context.request;\n\n        delete headers.host;\n        headers.Authorization = 'token ' + (await tokenGetter(context));\n\n        const response = await request('https://api.github.com' + url, {\n            method,\n            headers,\n            body: Object.keys(body)[0] ? body : null\n        });\n\n        (context.status = response.status),\n        (context.body = await response.json());\n    };\n}\n"],"file":"GitHub.js"}