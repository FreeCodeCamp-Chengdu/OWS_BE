{"version":3,"sources":["../../source/form/index.js"],"names":["JinShuJu","JSJ","queryReply","Form","context","fid","id","source","query","reply","Query","equalTo","include","first","Object","assign","URIError","code","body","toJSON","queryReplies","list","find","map","item"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAEO,MAAMA,QAAQ,GAAGC,GAAjB;;;AAEA,eAAeC,UAAf,CAA0BC,IAA1B,EAAgCC,OAAhC,EAAyCC,GAAzC,EAA8CC,EAA9C,EAAkD;AACrD,QAAM;AAAEC,IAAAA;AAAF,MAAaH,OAAO,CAACI,KAA3B;AAEA,QAAM;AAAEA,IAAAA;AAAF,MAAYL,IAAI,CAACI,MAAD,CAAtB;AAEA,MAAIE,KAAK,GAAG,MAAM,IAAIC,iBAAJ,CAAU,OAAV,EACbC,OADa,CACL,QADK,EACKJ,MADL,EAEbI,OAFa,CAEL,SAFK,EAEMN,GAFN,EAGbM,OAHa,CAGL,IAHK,EAGC,CAACL,EAHF,EAIbM,OAJa,CAIL,MAJK,EAIG,MAJH,EAKbC,KALa,EAAlB;AAOA,MAAI,CAACJ,KAAL,EACI,MAAMK,MAAM,CAACC,MAAP,CACF,IAAIC,QAAJ,CAAc,GAAEX,GAAI,IAAGC,EAAG,mBAAkBC,MAAO,EAAnD,CADE,EAEF;AAAEU,IAAAA,IAAI,EAAE;AAAR,GAFE,CAAN;AAKJb,EAAAA,OAAO,CAACc,IAAR,GAAeV,KAAK,CAACC,KAAK,CAACU,MAAN,EAAD,CAApB;AACH;;AAEM,eAAeC,YAAf,CAA4BjB,IAA5B,EAAkCC,OAAlC,EAA2CE,EAA3C,EAA+C;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAaH,OAAO,CAACI,KAA3B;AAEA,QAAM;AAAEA,IAAAA;AAAF,MAAYL,IAAI,CAACI,MAAD,CAAtB;AAEA,QAAMc,IAAI,GAAG,MAAM,IAAIX,iBAAJ,CAAU,OAAV,EACdC,OADc,CACN,QADM,EACIJ,MADJ,EAEdI,OAFc,CAEN,SAFM,EAEKL,EAFL,EAGdM,OAHc,CAGN,MAHM,EAGE,MAHF,EAIdU,IAJc,EAAnB;AAMAlB,EAAAA,OAAO,CAACc,IAAR,GAAeG,IAAI,CAACE,GAAL,CAASC,IAAI,IAAIhB,KAAK,CAACgB,IAAI,CAACL,MAAL,EAAD,CAAtB,CAAf;AACH","sourcesContent":["import { Query } from 'leanengine';\n\nimport * as JSJ from './JinShuJu';\n\nexport const JinShuJu = JSJ;\n\nexport async function queryReply(Form, context, fid, id) {\n    const { source } = context.query;\n\n    const { query } = Form[source];\n\n    var reply = await new Query('Reply')\n        .equalTo('source', source)\n        .equalTo('form_id', fid)\n        .equalTo('id', +id)\n        .include('form', 'user')\n        .first();\n\n    if (!reply)\n        throw Object.assign(\n            new URIError(`${fid}/${id} isn't found in ${source}`),\n            { code: 404 }\n        );\n\n    context.body = query(reply.toJSON());\n}\n\nexport async function queryReplies(Form, context, id) {\n    const { source } = context.query;\n\n    const { query } = Form[source];\n\n    const list = await new Query('Reply')\n        .equalTo('source', source)\n        .equalTo('form_id', id)\n        .include('form', 'user')\n        .find();\n\n    context.body = list.map(item => query(item.toJSON()));\n}\n"],"file":"index.js"}