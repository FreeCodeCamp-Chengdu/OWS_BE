{"version":3,"sources":["../../source/form/index.js"],"names":["JinShuJu","JSJ","createReply","vendor","context","OID","form","LC","Object","createWithoutData","fetch","source","get","reply","assign","URIError","code","queryReply","Form","fid","id","query","Query","equalTo","include","first","body","toJSON","queryForm","list","find","replies","map","item","user","searchForm","keywords","page","rows","skip","limit","FormStatistic","extend","Cloud","afterSave","object","form_id","statistic","save","data","entries","filter","key","startsWith","flat","queryStatistic"],"mappings":"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","sourcesContent":["import LC from 'leanengine';\n\nimport * as JSJ from './JinShuJu';\n\nimport { searchQuery, count } from '../utility';\n\nexport const JinShuJu = JSJ;\n\nexport async function createReply(vendor, context, OID) {\n    const form = await LC.Object.createWithoutData('Form', OID).fetch();\n\n    const source = form.get('source');\n\n    if (source) return await vendor[source].reply(context, form);\n\n    throw Object.assign(new URIError(OID + ' not found'), {\n        code: 404\n    });\n}\n\nexport async function queryReply(Form, context, fid, id) {\n    const { source } = context.query;\n\n    const { query } = Form[source];\n\n    var reply = await new LC.Query('FormReply')\n        .equalTo('source', source)\n        .equalTo('form_id', fid)\n        .equalTo('id', +id)\n        .include('form')\n        .first();\n\n    if (!reply)\n        throw Object.assign(\n            new URIError(`${fid}/${id} isn't found in ${source}`),\n            { code: 404 }\n        );\n\n    context.body = query(reply.toJSON());\n}\n\nexport async function queryForm(vendor, context, id) {\n    const { source } = context.query;\n\n    const { query } = vendor[source];\n\n    const form = (await new LC.Query('Form')\n        .equalTo('id', id)\n        .first()).toJSON();\n\n    const list = await new LC.Query('FormReply')\n        .equalTo('source', source)\n        .equalTo('form_id', id)\n        .find();\n\n    form.replies = list.map(item => {\n        item = item.toJSON();\n        item.form = form;\n\n        item = query(item);\n        delete item.form;\n        delete item.user;\n\n        return item;\n    });\n\n    context.body = form;\n}\n\nexport async function searchForm(context) {\n    const { keywords, page = 1, rows = 10 } = context.query;\n\n    context.body = await (keywords\n        ? searchQuery('Form', ['name', 'description', 'source'], keywords)\n        : new LC.Query('Form')\n    )\n        .skip((page - 1) * rows)\n        .limit(rows)\n        .find();\n}\n\nconst FormStatistic = LC.Object.extend('FormStatistic');\n\nLC.Cloud.afterSave('FormReply', async ({ object }) => {\n    const { source, form_id } = object.toJSON();\n\n    const list = await new LC.Query('FormReply')\n        .equalTo('source', source)\n        .equalTo('form_id', form_id)\n        .find();\n\n    const statistic = await new LC.Query('FormStatistic')\n        .equalTo('source', source)\n        .equalTo('form_id', form_id)\n        .first();\n\n    await (statistic || new FormStatistic()).save({\n        source,\n        form_id,\n        data: count(\n            list\n                .map(item =>\n                    Object.entries(item.toJSON().data).filter(([key]) =>\n                        key.startsWith('field_')\n                    )\n                )\n                .flat()\n        )\n    });\n});\n\nexport async function queryStatistic(context, id) {\n    const { source } = context.query;\n\n    context.body = await new LC.Query('FormStatistic')\n        .equalTo('source', source)\n        .equalTo('form_id', id)\n        .first();\n}\n"],"file":"index.js"}