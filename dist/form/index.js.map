{"version":3,"sources":["../../source/form/index.js"],"names":["JinShuJu","JSJ","queryReply","Form","context","fid","id","source","query","reply","LC","Query","equalTo","include","first","Object","assign","URIError","code","body","toJSON","queryForm","vendor","form","list","find","replies","map","item","user","FormStatistic","extend","Cloud","afterSave","object","form_id","statistic","save","data","entries","filter","key","startsWith","flat","queryStatistic"],"mappings":"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","sourcesContent":["import LC from 'leanengine';\n\nimport * as JSJ from './JinShuJu';\n\nimport { count } from '../utility';\n\nexport const JinShuJu = JSJ;\n\nexport async function queryReply(Form, context, fid, id) {\n    const { source } = context.query;\n\n    const { query } = Form[source];\n\n    var reply = await new LC.Query('FormReply')\n        .equalTo('source', source)\n        .equalTo('form_id', fid)\n        .equalTo('id', +id)\n        .include('form')\n        .first();\n\n    if (!reply)\n        throw Object.assign(\n            new URIError(`${fid}/${id} isn't found in ${source}`),\n            { code: 404 }\n        );\n\n    context.body = query(reply.toJSON());\n}\n\nexport async function queryForm(vendor, context, id) {\n    const { source } = context.query;\n\n    const { query } = vendor[source];\n\n    const form = (await new LC.Query('Form')\n        .equalTo('id', id)\n        .first()).toJSON();\n\n    const list = await new LC.Query('FormReply')\n        .equalTo('source', source)\n        .equalTo('form_id', id)\n        .find();\n\n    form.replies = list.map(item => {\n        item = item.toJSON();\n        item.form = form;\n\n        item = query(item);\n        delete item.form;\n        delete item.user;\n\n        return item;\n    });\n\n    context.body = form;\n}\n\nconst FormStatistic = LC.Object.extend('FormStatistic');\n\nLC.Cloud.afterSave('FormReply', async ({ object }) => {\n    const { source, form_id } = object.toJSON();\n\n    const list = await new LC.Query('FormReply')\n        .equalTo('source', source)\n        .equalTo('form_id', form_id)\n        .find();\n\n    const statistic = await new LC.Query('FormStatistic')\n        .equalTo('source', source)\n        .equalTo('form_id', form_id)\n        .first();\n\n    await (statistic || new FormStatistic()).save({\n        source,\n        form_id,\n        data: count(\n            list\n                .map(item =>\n                    Object.entries(item.toJSON().data).filter(([key]) =>\n                        key.startsWith('field_')\n                    )\n                )\n                .flat()\n        )\n    });\n});\n\nexport async function queryStatistic(context, id) {\n    const { source } = context.query;\n\n    context.body = await new LC.Query('FormStatistic')\n        .equalTo('source', source)\n        .equalTo('form_id', id)\n        .first();\n}\n"],"file":"index.js"}