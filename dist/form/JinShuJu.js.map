{"version":3,"sources":["../../source/form/JinShuJu.js"],"names":["Form","LC","Object","extend","FormReply","parseForm","id","window","document","JSDOM","fromURL","source","name","querySelector","textContent","trim","description","innerHTML","fields","Array","from","querySelectorAll","item","fieldType","apiCode","label","dataset","key","type","replace","defaultValue","filter","Boolean","create","context","request","body","form","Query","equalTo","first","OID","save","reply","meta","entry","info_browser","info_os","info_remote_ip","serial_number","extra","get","data","user","field","find","email","mobilePhoneNumber","currentUser","useMasterKey","form_id","system","browser","IPA","status","query","entries","map","value"],"mappings":"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","sourcesContent":["import LC from 'leanengine';\n\nimport { JSDOM } from 'jsdom';\n\nimport { valueOf, updateRecord } from '../utility';\n\nconst Form = LC.Object.extend('Form'),\n    FormReply = LC.Object.extend('FormReply');\n\nasync function parseForm(id) {\n    const {\n        window: { document }\n    } = await JSDOM.fromURL('https://jinshuju.net/f/' + id);\n\n    return {\n        source: 'JinShuJu',\n        id,\n        name: document.querySelector('h1.form-title').textContent.trim(),\n        description: document\n            .querySelector('.form-description')\n            .innerHTML.trim(),\n        fields: Array.from(document.querySelectorAll('.field'), item => {\n            const { fieldType, apiCode, label } = item.dataset;\n\n            const description = item.querySelector('.field-description');\n\n            if (fieldType !== 'page-break')\n                for (let key in item.dataset)\n                    return {\n                        type: fieldType.replace(/-field$/, ''),\n                        key: apiCode,\n                        label,\n                        description:\n                            description && description.innerHTML.trim(),\n                        defaultValue: valueOf(item)\n                    };\n        }).filter(Boolean)\n    };\n}\n\nexport async function create(context) {\n    const { id } = context.request.body;\n\n    const form = await new LC.Query('Form').equalTo('id', id).first();\n\n    const OID = (await (form || new Form()).save(await parseForm(id))).id;\n\n    context.body = `\n<h1>表单${form ? '更新' : '添加'}成功</h1>\n<p>\n    请将<b>钩子接口网址</b> https://fcc-cd.leanapp.cn/form/${OID}/reply\n    填在<a href=\"https://jinshuju.net/forms/${id}/webhook\">这里</a>\n</p>`;\n}\n\nexport async function reply(context, meta) {\n    const {\n        form,\n        entry: {\n            info_browser,\n            info_os,\n            info_remote_ip,\n            serial_number,\n            ...extra\n        }\n    } = context.request.body;\n\n    var fields = meta.get('fields'),\n        data = {},\n        user;\n\n    for (let key in extra) {\n        const field = fields.find(item => item.key === key);\n\n        if (field)\n            switch (field.type) {\n                case 'email':\n                    (user = user || {}), (user.email = extra[key]);\n                    continue;\n                case 'mobile':\n                    (user = user || {}), (user.mobilePhoneNumber = extra[key]);\n                    continue;\n                case 'telephone':\n                    continue;\n            }\n        data[key] = extra[key];\n    }\n\n    if (user)\n        user = await updateRecord('_User', user, {\n            user: context.currentUser,\n            useMasterKey: true\n        });\n\n    await new FormReply().save({\n        source: 'JinShuJu',\n        form: meta,\n        form_id: form,\n        id: serial_number,\n        system: info_os,\n        browser: info_browser,\n        IPA: info_remote_ip,\n        user,\n        data\n    });\n\n    (context.status = 201), (context.body = '');\n}\n\nexport function query(reply) {\n    var {\n        data,\n        form: { fields }\n    } = reply;\n\n    return {\n        ...reply,\n        data: Object.entries(data).map(([key, value]) => ({\n            key,\n            value,\n            ...fields.find(item => item.key === key || item.type === key)\n        }))\n    };\n}\n"],"file":"JinShuJu.js"}