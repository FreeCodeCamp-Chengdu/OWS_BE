{"version":3,"sources":["../source/app.js"],"names":["app","Koa","use","Session","entry","context","query","source","update","search","Form","create","reply","id","LC","Object","createWithoutData","fetch","include","toJSON","body","form","rule","RecurrenceRule","hour"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;AAEA;;AAEO,MAAMA,GAAG,GAAG,IAAIC,YAAJ,GACdC,GADc,CACV,mBAAI,GAAJ,EAASC,OAAO,CAACC,KAAjB,CADU,EAEdF,GAFc,CAEV,mBAAI,QAAJ,EAAcG,OAAO,IAAIF,OAAO,CAACE,OAAO,CAACC,KAAR,CAAcC,MAAf,CAAP,CAA8BF,OAA9B,CAAzB,CAFU,EAGdH,GAHc,CAGV,oBAAK,kBAAL,EAAyBM,gBAAzB,CAHU,EAIdN,GAJc,CAIV,mBAAI,WAAJ,EAAiBO,gBAAjB,CAJU,EAKdP,GALc,CAKV,oBAAK,OAAL,EAAcG,OAAO,IAAIK,IAAI,CAACL,OAAO,CAACC,KAAR,CAAcC,MAAf,CAAJ,CAA2BI,MAA3B,CAAkCN,OAAlC,CAAzB,CALU,EAMdH,GANc,CAOX,oBAAK,aAAL,EAAoBG,OAAO,IACvBK,IAAI,CAACL,OAAO,CAACC,KAAR,CAAcC,MAAf,CAAJ,CAA2BK,KAA3B,CAAiCP,OAAjC,CADJ,CAPW,EAWdH,GAXc,CAYX,mBAAI,iBAAJ,EAAuB,OAAOG,OAAP,EAAgBQ,EAAhB,KAAuB;AAC1C,MAAID,KAAK,GAAGE,oBAAGC,MAAH,CAAUC,iBAAV,CAA4B,OAA5B,EAAqCH,EAArC,CAAZ;;AAEA,QAAMD,KAAK,CAACK,KAAN,CAAY;AAAEC,IAAAA,OAAO,EAAE,CAAC,MAAD,EAAS,MAAT;AAAX,GAAZ,CAAN;AAEAN,EAAAA,KAAK,GAAGA,KAAK,CAACO,MAAN,EAAR;AAEAd,EAAAA,OAAO,CAACe,IAAR,GAAeV,IAAI,CAACE,KAAK,CAACS,IAAN,CAAWd,MAAZ,CAAJ,CAAwBD,KAAxB,CAA8BM,KAA9B,CAAf;AACH,CARD,CAZW,CAAZ;;AAuBP,MAAMU,IAAI,GAAG,IAAIC,4BAAJ,EAAb;AAEAD,IAAI,CAACE,IAAL,GAAY,CAAZ;AAEA,+BAAYF,IAAZ,EAAkB,MAAM,sBAAO;AAAEhB,EAAAA,KAAK,EAAE;AAAT,CAAP,CAAxB","sourcesContent":["import Koa from 'koa';\nimport { get, post } from 'koa-route';\n\nimport * as Session from './session';\nimport { update, search } from './activity';\nimport * as Form from './form';\n\nimport { scheduleJob, RecurrenceRule } from 'node-schedule';\n\nimport LC from 'leanengine';\n\nexport const app = new Koa()\n    .use(get('/', Session.entry))\n    .use(get('/OAuth', context => Session[context.query.source](context)))\n    .use(post('/activity/update', update))\n    .use(get('/activity', search))\n    .use(post('/form', context => Form[context.query.source].create(context)))\n    .use(\n        post('/form/reply', context =>\n            Form[context.query.source].reply(context)\n        )\n    )\n    .use(\n        get('/form/reply/:id', async (context, id) => {\n            var reply = LC.Object.createWithoutData('Reply', id);\n\n            await reply.fetch({ include: ['form', 'user'] });\n\n            reply = reply.toJSON();\n\n            context.body = Form[reply.form.source].query(reply);\n        })\n    );\n\nconst rule = new RecurrenceRule();\n\nrule.hour = 1;\n\nscheduleJob(rule, () => update({ query: {} }));\n"],"file":"app.js"}