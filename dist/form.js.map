{"version":3,"sources":["../source/form.js"],"names":["Form","LC","Object","extend","Reply","JinShuJu","create","context","id","user","key","request","body","data","errorHandler","json","source","fields","fromEntries","map","form","Query","equalTo","find","save","status","reply","entry","info_browser","info_os","info_remote_ip","serial_number","extra","meta","assign","URIError","code","get","type","email","mobilePhoneNumber","currentUser","useMasterKey","system","browser","IPA","query","entries","mobile","value","name"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAEA,MAAMA,IAAI,GAAGC,oBAAGC,MAAH,CAAUC,MAAV,CAAiB,MAAjB,CAAb;AAAA,MACIC,KAAK,GAAGH,oBAAGC,MAAH,CAAUC,MAAV,CAAiB,OAAjB,CADZ;;AAGO,MAAME,QAAQ,GAAG;AACpB,QAAMC,MAAN,CAAaC,OAAb,EAAsB;AAClB,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA,IAAN;AAAYC,MAAAA;AAAZ,QAAoBH,OAAO,CAACI,OAAR,CAAgBC,IAA1C;AAEA,UAAMC,IAAI,GAAG,MAAM,CAAC,MAAM,sBACrB,WAAUJ,IAAK,IAAGC,GAAI,8BAA6BF,EAAG,EADjC,EAEtB;AAAEM,MAAAA,YAAY,EAAZA;AAAF,KAFsB,CAAP,EAGhBC,IAHgB,EAAnB;AAKCF,IAAAA,IAAI,CAACG,MAAL,GAAc,UAAf,EAA6BH,IAAI,CAACL,EAAL,GAAUA,EAAvC;AAEAK,IAAAA,IAAI,CAACI,MAAL,GAAcf,MAAM,CAACgB,WAAP,CACVL,IAAI,CAACI,MAAL,CAAYE,GAAZ,CAAgBN,IAAI,IAAI;AACpB,WAAK,IAAIH,GAAT,IAAgBG,IAAhB,EAAsB,OAAO,CAACH,GAAD,EAAMG,IAAI,CAACH,GAAD,CAAV,CAAP;AACzB,KAFD,CADU,CAAd;AAMA,UAAMU,IAAI,GAAG,MAAM,IAAInB,oBAAGoB,KAAP,CAAa,MAAb,EAAqBC,OAArB,CAA6B,IAA7B,EAAmCd,EAAnC,EAAuCe,IAAvC,EAAnB;AAEA,UAAM,CAACH,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAIpB,IAAJ,EAAZ,EAAwBwB,IAAxB,CAA6BX,IAA7B,CAAN;AAECN,IAAAA,OAAO,CAACkB,MAAR,GAAiB,GAAlB,EAAyBlB,OAAO,CAACK,IAAR,GAAe,EAAxC;AACH,GAtBmB;;AAuBpB,QAAMc,KAAN,CAAYnB,OAAZ,EAAqB;AACjB,kCASIA,OAAO,CAACI,OAAR,CAAgBC,IATpB;AAAA,UAAM;AACFQ,MAAAA,IADE;AAEFO,MAAAA,KAAK,EAAE;AACHC,QAAAA,YADG;AAEHC,QAAAA,OAFG;AAGHC,QAAAA,cAHG;AAIHC,QAAAA;AAJG;AAFL,KAAN;AAAA,UAOWC,KAPX;AAWA,UAAMC,IAAI,GAAG,MAAM,IAAIhC,oBAAGoB,KAAP,CAAa,MAAb,EACdC,OADc,CACN,QADM,EACI,UADJ,EAEdA,OAFc,CAEN,IAFM,EAEAF,IAFA,EAGdG,IAHc,EAAnB;AAKA,QAAI,CAACU,IAAI,CAAC,CAAD,CAAT,EACI,MAAM/B,MAAM,CAACgC,MAAP,CAAc,IAAIC,QAAJ,CAAaf,IAAI,GAAG,YAApB,CAAd,EAAiD;AACnDgB,MAAAA,IAAI,EAAE;AAD6C,KAAjD,CAAN;AAIJ,QAAInB,MAAM,GAAGgB,IAAI,CAAC,CAAD,CAAJ,CAAQI,GAAR,CAAY,QAAZ,CAAb;AAAA,QACIxB,IAAI,GAAG,EADX;AAAA,QAEIJ,IAFJ;;AAIA,SAAK,IAAIC,GAAT,IAAgBsB,KAAhB,EAAuB;AACnB,UAAIf,MAAM,CAACP,GAAD,CAAV,EACI,QAAQO,MAAM,CAACP,GAAD,CAAN,CAAY4B,IAApB;AACI,aAAK,OAAL;AACK7B,UAAAA,IAAI,GAAGA,IAAI,IAAI,EAAhB,EAAsBA,IAAI,CAAC8B,KAAL,GAAaP,KAAK,CAACtB,GAAD,CAAxC;AACA;;AACJ,aAAK,QAAL;AACKD,UAAAA,IAAI,GAAGA,IAAI,IAAI,EAAhB,EACCA,IAAI,CAAC+B,iBAAL,GAAyBR,KAAK,CAACtB,GAAD,CAD/B;AAEA;AAPR;AASJG,MAAAA,IAAI,CAACH,GAAD,CAAJ,GAAYsB,KAAK,CAACtB,GAAD,CAAjB;AACH;;AAED,QAAID,IAAJ,EACIA,IAAI,GAAG,MAAM,2BAAa,OAAb,EAAsBA,IAAtB,EAA4B;AACrCA,MAAAA,IAAI,EAAEF,OAAO,CAACkC,WADuB;AAErCC,MAAAA,YAAY,EAAE;AAFuB,KAA5B,CAAb;AAKJ,UAAM,IAAItC,KAAJ,GAAYoB,IAAZ,CAAiB;AACnBJ,MAAAA,IAAI,EAAEa,IAAI,CAAC,CAAD,CADS;AAEnBzB,MAAAA,EAAE,EAAEuB,aAFe;AAGnBY,MAAAA,MAAM,EAAEd,OAHW;AAInBe,MAAAA,OAAO,EAAEhB,YAJU;AAKnBiB,MAAAA,GAAG,EAAEf,cALc;AAMnBrB,MAAAA,IANmB;AAOnBI,MAAAA;AAPmB,KAAjB,CAAN;AAUCN,IAAAA,OAAO,CAACkB,MAAR,GAAiB,GAAlB,EAAyBlB,OAAO,CAACK,IAAR,GAAe,EAAxC;AACH,GAhFmB;;AAiFpBkC,EAAAA,KAAK,CAACpB,KAAD,EAAQ;AACT,QAAI;AACAb,MAAAA,IADA;AAEAO,MAAAA,IAAI,EAAE;AAAEH,QAAAA;AAAF,OAFN;AAGAR,MAAAA,IAAI,EAAE;AAAE8B,QAAAA,KAAF;AAASC,QAAAA;AAAT;AAHN,QAIAd,KAJJ;AAMAT,IAAAA,MAAM,GAAGf,MAAM,CAAC6C,OAAP,CAAe9B,MAAf,CAAT;AAEA,WAAOf,MAAM,CAAC6C,OAAP,CACH7C,MAAM,CAACgC,MAAP,CAAcrB,IAAd,EAAoB;AAChB0B,MAAAA,KADgB;AAEhBS,MAAAA,MAAM,EAAER;AAFQ,KAApB,CADG,EAKLrB,GALK,CAKD,CAAC,CAACT,GAAD,EAAMuC,KAAN,CAAD,KACF/C,MAAM,CAACgC,MAAP,CACI;AACIxB,MAAAA,GADJ;AAEIuC,MAAAA;AAFJ,KADJ,EAKI,CAAChC,MAAM,CAACM,IAAP,CACG,CAAC,CAAC2B,IAAD,EAAO;AAAEZ,MAAAA;AAAF,KAAP,CAAD,KAAsBY,IAAI,KAAKxC,GAAT,IAAgB4B,IAAI,KAAK5B,GADlD,KAEI,EAFL,EAES,CAFT,CALJ,CANG,CAAP;AAgBH;;AA1GmB,CAAjB","sourcesContent":["import LC from 'leanengine';\n\nimport { request, errorHandler, updateRecord } from './utility';\n\nconst Form = LC.Object.extend('Form'),\n    Reply = LC.Object.extend('Reply');\n\nexport const JinShuJu = {\n    async create(context) {\n        const { id, user, key } = context.request.body;\n\n        const data = await (await request(\n            `https://${user}:${key}@jinshuju.net/api/v1/forms/${id}`,\n            { errorHandler }\n        )).json();\n\n        (data.source = 'JinShuJu'), (data.id = id);\n\n        data.fields = Object.fromEntries(\n            data.fields.map(data => {\n                for (let key in data) return [key, data[key]];\n            })\n        );\n\n        const form = await new LC.Query('Form').equalTo('id', id).find();\n\n        await (form[0] || new Form()).save(data);\n\n        (context.status = 201), (context.body = '');\n    },\n    async reply(context) {\n        const {\n            form,\n            entry: {\n                info_browser,\n                info_os,\n                info_remote_ip,\n                serial_number,\n                ...extra\n            }\n        } = context.request.body;\n\n        const meta = await new LC.Query('Form')\n            .equalTo('source', 'JinShuJu')\n            .equalTo('id', form)\n            .find();\n\n        if (!meta[0])\n            throw Object.assign(new URIError(form + ' not found'), {\n                code: 400\n            });\n\n        var fields = meta[0].get('fields'),\n            data = {},\n            user;\n\n        for (let key in extra) {\n            if (fields[key])\n                switch (fields[key].type) {\n                    case 'email':\n                        (user = user || {}), (user.email = extra[key]);\n                        continue;\n                    case 'mobile':\n                        (user = user || {}),\n                        (user.mobilePhoneNumber = extra[key]);\n                        continue;\n                }\n            data[key] = extra[key];\n        }\n\n        if (user)\n            user = await updateRecord('_User', user, {\n                user: context.currentUser,\n                useMasterKey: true\n            });\n\n        await new Reply().save({\n            form: meta[0],\n            id: serial_number,\n            system: info_os,\n            browser: info_browser,\n            IPA: info_remote_ip,\n            user,\n            data\n        });\n\n        (context.status = 201), (context.body = '');\n    },\n    query(reply) {\n        var {\n            data,\n            form: { fields },\n            user: { email, mobilePhoneNumber }\n        } = reply;\n\n        fields = Object.entries(fields);\n\n        return Object.entries(\n            Object.assign(data, {\n                email,\n                mobile: mobilePhoneNumber\n            })\n        ).map(([key, value]) =>\n            Object.assign(\n                {\n                    key,\n                    value\n                },\n                (fields.find(\n                    ([name, { type }]) => name === key || type === key\n                ) || '')[1]\n            )\n        );\n    }\n};\n"],"file":"form.js"}