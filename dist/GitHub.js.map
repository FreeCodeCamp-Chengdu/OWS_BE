{"version":3,"sources":["../source/GitHub.js"],"names":["handleError","context","body","onError","error","Object","assign","URIError","error_description","OAuth","client_id","client_secret","onDone","Function","response","method","URLSearchParams","code","query","fromEntries","text","entries","status","scope","split","headers","Authorization","access_token","Accept","user","json"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA,eAAeA,WAAf,CAA2BC,OAA3B,EAAoCC,IAApC,EAA0CC,OAA1C,EAAmD;AAC/C,QAAMC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAIC,QAAJ,CAAaL,IAAI,CAACM,iBAAlB,CAAd,EAAoD;AAC9DP,IAAAA,OAD8D;AAE9DC,IAAAA;AAF8D,GAApD,CAAd;AAKA,MAAIC,OAAJ,EAAa,MAAMA,OAAO,CAACF,OAAD,EAAUG,KAAV,CAAb,CAAb,KACK,MAAMA,KAAN;AACR;;AAEM,SAASK,KAAT,CAAeC,SAAf,EAA0BC,aAA1B,EAAyCC,MAAzC,EAAiDT,OAAjD,EAA0D;AAC7DA,EAAAA,OAAO,GAAGA,OAAO,YAAYU,QAAnB,IAA+BV,OAAzC;AAEA,SAAO,MAAMF,OAAN,IAAiB;AACpB,QAAIa,QAAQ,GAAG,MAAM,wBACjB,6CADiB,EAEjB;AACIC,MAAAA,MAAM,EAAE,MADZ;AAEIb,MAAAA,IAAI,EAAE,IAAIc,oBAAJ,CAAoB;AACtBN,QAAAA,SADsB;AAEtBC,QAAAA,aAFsB;AAGtBM,QAAAA,IAAI,EAAEhB,OAAO,CAACiB,KAAR,CAAcD;AAHE,OAApB;AAFV,KAFiB,CAArB;AAYA,UAAMf,IAAI,GAAGG,MAAM,CAACc,WAAP,CACT,IAAIH,oBAAJ,EAAoB,MAAMF,QAAQ,CAACM,IAAT,EAA1B,GAA2CC,OAA3C,EADS,CAAb;AAIA,QAAIP,QAAQ,CAACQ,MAAT,GAAkB,GAAtB,EACI,OAAO,MAAMtB,WAAW,CAACC,OAAD,EAAUC,IAAV,EAAgBC,OAAhB,CAAxB;AAEJ,QAAID,IAAI,CAACqB,KAAT,EAAgBrB,IAAI,CAACqB,KAAL,GAAarB,IAAI,CAACqB,KAAL,CAAWC,KAAX,CAAiB,GAAjB,CAAb;AAEhBV,IAAAA,QAAQ,GAAG,MAAM,wBAAM,6BAAN,EAAqC;AAClDW,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,SAAQxB,IAAI,CAACyB,YAAa,EADrC;AAELC,QAAAA,MAAM,EAAE;AAFH;AADyC,KAArC,CAAjB;AAOA1B,IAAAA,IAAI,CAAC2B,IAAL,GAAY,MAAMf,QAAQ,CAACgB,IAAT,EAAlB;AAEA,QAAIhB,QAAQ,CAACQ,MAAT,GAAkB,GAAtB,EAA2B,MAAMtB,WAAW,CAACC,OAAD,EAAUC,IAAV,EAAgBC,OAAhB,CAAjB,CAA3B,KACK,MAAMS,MAAM,CAACX,OAAD,EAAUC,IAAV,CAAZ;AACR,GAjCD;AAkCH","sourcesContent":["import { URLSearchParams } from 'url';\n\nimport fetch from 'node-fetch';\n\nasync function handleError(context, body, onError) {\n    const error = Object.assign(new URIError(body.error_description), {\n        context,\n        body\n    });\n\n    if (onError) await onError(context, error);\n    else throw error;\n}\n\nexport function OAuth(client_id, client_secret, onDone, onError) {\n    onError = onError instanceof Function && onError;\n\n    return async context => {\n        var response = await fetch(\n            'https://github.com/login/oauth/access_token',\n            {\n                method: 'POST',\n                body: new URLSearchParams({\n                    client_id,\n                    client_secret,\n                    code: context.query.code\n                })\n            }\n        );\n\n        const body = Object.fromEntries(\n            new URLSearchParams(await response.text()).entries()\n        );\n\n        if (response.status > 299)\n            return await handleError(context, body, onError);\n\n        if (body.scope) body.scope = body.scope.split(',');\n\n        response = await fetch('https://api.github.com/user', {\n            headers: {\n                Authorization: `token ${body.access_token}`,\n                Accept: 'application/json'\n            }\n        });\n\n        body.user = await response.json();\n\n        if (response.status > 299) await handleError(context, body, onError);\n        else await onDone(context, body);\n    };\n}\n"],"file":"GitHub.js"}